# Databricks notebook source
def filtered(df: DataFrame, practice_codes: list) -> DataFrame:  #maybe add Spark in inputs?
    """
    Filter a Spark DataFrame based on multiple practice values.
    
    Parameters:
        df : The input Spark DataFrame.
        practice_codes : Variable number of practice values to filter the DataFrame.
        
    Returns:
        filtered_df = The filtered Spark Dataframe
    """
    
    filtered_df = df.filter(F.col("PRACTICE_CODE").isin(practice_codes))
    return filtered_df

# COMMAND ----------

def spot_check(df: DataFrame, df2: DataFrame, display_table = False) -> DataFrame:
    """
    Compare spot checked Spark DataFrames before and after suppression. These tables are randomly generated by picking 4 random suppressed practice_codes.

    Parameters:
        df : The unsuppressed Spark DataFrame.
        df2 : The suppressed Spark DataFrame.

    Returns:
        before_suppression_test_df
        after_suppresion_test_df
    """
    
    suppressed_practice_codes = df2.filter(df2["VALUE"] == "*").select(F.col("PRACTICE_CODE")).distinct().sample(False, 0.5).limit(4).collect()
    suppressed_practice_codes = [row.PRACTICE_CODE for row in suppressed_practice_codes]


    if len(suppressed_practice_codes) == 0:
      print("Error: No suppressed values where found")
    #print(type(practice_codes))
    #print(practice_codes)

    # Getting the original dataframe before suppression to export out for PRACTICE_CODE == 'A82006' and 'Y06007'
    before_suppression_test_df = filtered(df, suppressed_practice_codes)

    # Testing if the 3 rules of suppression are satisified in the output for PRACTICE_CODE == 'A82006' and 'Y06007'
    after_suppression_test_df = filtered(df2, suppressed_practice_codes)
    
    if display_table == True:
        print("-------BEFORE-SUPPRESSION-TABLE--------------")
        display(before_suppression_test_df)
        print("-------AFTER-SUPPRESSION-TABLE--------------")
        display(after_suppression_test_df)
      
    return before_suppression_test_df, after_suppression_test_df